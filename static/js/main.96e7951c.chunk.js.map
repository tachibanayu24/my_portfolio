{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","Fragment","AppBar_default","position","color","Toolbar_default","Typography_default","variant","style","fontFamily","fontWeight","noWrap","className","FaceTwoTone_default","height","width","marginRight","Divider_default","inset","CodeTwoTone_default","BrushTwoTone_default","PhotoCameraTwoTone_default","WhatshotTwoTone_default","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96e7951c.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nimport classNames from 'classnames';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\n\nimport FaceIcon from '@material-ui/icons/FaceTwoTone';\nimport CodeIcon from '@material-ui/icons/CodeTwoTone';\nimport BrushIcon from '@material-ui/icons/BrushTwoTone';\nimport CameraIcon from '@material-ui/icons/PhotoCameraTwoTone';\nimport WhatshotIcon from '@material-ui/icons/WhatshotTwoTone';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Typography variant=\"title\" color=\"inherit\" style={{ fontFamily: \"Courier New\", fontWeight: 900}} noWrap>\n            <span style={{color: '#1E90FF' }}>/Yuto_Tachibana</span> <span style={{ color: '#FF6347' }}>❯</span><span style={{ color: '#A9A9A9'}}>❯❯ Portfolio_</span>\n          </Typography>\n        </Toolbar>\n        </AppBar>\n\n        <main>\n          <div className=\"sub-content bio\">\n            <div className=\"content-title\">\n              <FaceIcon style={{height: 35, width: 35, marginRight: 10,}} />\n              <span>bio</span>\n            </div>\n            <Divider inset />\n            <div className=\"sub-content-body\">\n              <p>都内在住のテック好きな男子です。</p>\n              <p>家庭の事情で高校を1年で中退して肉体労働者になりましたが、お金をためて高卒認定を取得し、都内の大学(工学部)へ進学。<br />\n                大学に通いながら新宿のベンチャー企業でサービス運用、業務改善、採用活動、ビジネス開発とマルチに働いていました。</p>\n              <p>2018年4月に港区の大手通信系SIerに新卒入社し、そこではビジネス企画、研究開発系のお仕事をしています。<br />\n                業務ではあまりコードを書く機会を作れないので、プライベートでよくコーディングしています。</p>\n            </div>\n          </div>\n          <div className=\"sub-content skill\">\n            <div className=\"content-title\">\n              <CodeIcon style={{height: 35, width: 35, marginRight: 10,}} />\n              <span>skills</span>\n            </div>\n            <Divider inset />\n          </div>\n          <div className=\"sub-content work\">\n            <div className=\"content-title\">\n              <BrushIcon style={{height: 35, width: 35, marginRight: 10,}} />\n              <span>works/activities</span>\n              <Divider inset />\n            </div>\n          </div>\n          <div className=\"sub-content photo\">\n            <div className=\"content-title\">\n              <CameraIcon style={{height: 35, width: 35, marginRight: 10,}} />\n              <span>photos</span>\n              <Divider inset />\n            </div>\n          </div>\n          <div className=\"sub-content sns\">\n            <div className=\"content-title\">\n              <WhatshotIcon style={{height: 35, width: 35, marginRight: 10,}} />\n              <span>sns</span>\n              <Divider inset />\n            </div>\n          </div>\n        </main>\n\n        <footer>\n          <p>copyright 2018- Yuto Tachibana</p>\n        </footer>\n    </React.Fragment>\n    );\n  }\n}\n\nconst cards = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}